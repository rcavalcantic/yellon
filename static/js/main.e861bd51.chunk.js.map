{"version":3,"sources":["static/images/teatro-amazonas.jpg","static/images/logotipo.png","components/Hero/styles.js","components/Hero/Hero.jsx","components/Header/styles.js","components/Header/Header.jsx","components/Panel/styles.js","components/Panel/Panel.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","HeroImg","styled","img","imgHero","Hero","Component","Header","header","HeaderWrapper","div","Logo","MenuButton","button","onClick","window","history","go","src","yellonLogo","alt","PanelTitle","Resume","Panel","App","className","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,6C,mBCA3CD,EAAOC,QAAU,IAA0B,sC,ikBCG3C,IAAMC,EAAUC,IAAOC,IAAV,IACaC,KCDLC,E,iLAEjB,OACE,kBAACJ,EAAD,U,GAH4BK,a,4vBCDlC,IAAMC,EAASL,IAAOM,OAAV,KAMNC,EAAgBP,IAAOQ,IAAV,KAIbC,EAAOT,IAAOC,IAAV,KAOJS,EAAaV,IAAOW,OAAV,K,iBCfKR,E,iLAEjB,OACE,kBAACE,EAAD,KACE,kBAACE,EAAD,CAAeK,QAAS,WAAOC,OAAOC,QAAQC,GAAG,sCAC7C,kBAACN,EAAD,CAAMO,IAAKC,IAAYC,IAAI,4BAC7B,kBAACR,EAAD,mB,GANwBN,a,8iBCFlC,IAAMe,EAAanB,IAAOQ,IAAV,KAQVY,EAASpB,IAAOQ,IAAV,KCPSa,E,iLAEjB,OACE,oCACE,kBAACF,EAAD,uCACA,kBAACC,EAAD,KACE,+DACA,yC,GAPyBhB,a,MCapBkB,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e861bd51.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/teatro-amazonas.415bca98.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logotipo.a67edff6.png\";","import styled from 'styled-components'\nimport imgHero from '../../static/images/teatro-amazonas.jpg'\n\nconst HeroImg = styled.img`\n  background-image: url(${imgHero});\n  height: -webkit-fill-available;\n  width: -webkit-fill-available;\n  background-position: center;\n  background-repeat: no-repeat;\n  background-size: cover;\n  position: absolute;\n  z-index: -999;\n  filter: grayscale(100%);\n  opacity: 0.7;\n`\n\nexport { HeroImg }","import React, { Component } from 'react'\nimport { HeroImg } from './styles' \n\nexport default class Hero extends Component {\n  render() {\n    return(\n      <HeroImg />\n    )\n  }\n}","import styled from 'styled-components'\n\nconst Header = styled.header`\n  position: fixed;\n  top: 0;\n  width: 100%;\n`\n\nconst HeaderWrapper = styled.div`\n  margin: 32px;\n`\n\nconst Logo = styled.img`\n  max-height: 200px;\n  max-width: 200px;\n  margin-left: 256px;\n  margin-top: -50px;\n`\n\nconst MenuButton = styled.button`\n  float: right;\n  background-color: initial;\n  color: black;\n  border: none;\n  padding: 16px;\n  text-align: center;\n  text-decoration: none;\n  display: inline-block;\n  font-size: 22px;\n  cursor: pointer;\n  font-weight: bolder;\n  margin-right: 256px;\n\n  &:hover {\n    border: solid;\n    border-width: 0.5px;\n  }\n`\n\nexport { Header, HeaderWrapper, Logo, MenuButton }","import React, { Component } from 'react'\nimport { Header, HeaderWrapper, Logo, MenuButton } from './styles' \nimport yellonLogo from '../../static/images/logotipo.png'\n\nexport default class Hero extends Component {\n  render() {\n    return(\n      <Header>\n        <HeaderWrapper onClick={() => {window.history.go(\"https://yellonpublicidade.com.br\")}}>\n            <Logo src={yellonLogo} alt=\"Yellon Publicidade logo\" />\n          <MenuButton>MENU</MenuButton>\n        </HeaderWrapper>\n      </Header>\n    )\n  }\n}","import styled from 'styled-components'\n\nconst PanelTitle = styled.div`\n  position: fixed;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 64px;\n  font-weight: bolder;\n`\nconst Resume = styled.div`\n  position: fixed;\n  bottom: 8px;\n  left: 16px;\n  font-size: 18px;\n  margin-left: 128px;\n\n  > h2 {\n    font-weight: normal;\n  }\n\n  > span {\n    width: 32px;\n    height: 32px;\n    border-radius: 50%;\n    border: solid;\n    border-width: 0.5px;\n    &:hover {\n\n    }\n  }\n` \n\nexport { PanelTitle, Resume}","import React, { Component } from 'react'\nimport { PanelTitle, Resume } from './styles'\n\nexport default class Panel extends Component {\n  render() {\n    return(\n      <>\n        <PanelTitle>Fique ligado e saia na frente.</PanelTitle>\n        <Resume>\n          <h2>Seja On, Seja Off, Seja YellOn!</h2>\n          <span>i</span>\n        </Resume>\n      </>\n    )\n  }\n}","import React from 'react';\nimport Hero from './components/Hero/Hero'\nimport Header from './components/Header/Header'\nimport Panel from './components/Panel/Panel'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Hero />\n      <Panel />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}